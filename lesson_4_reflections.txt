When would you want to use a remote repository rather than keeping all your work local?

  - while working from an unfimiliar computer
  - while working on a collaborative project with others


new terms>
  GitHub - a service that helps users interact with git using a GUI - built on top of git, to collborate and create remote depositories
   git push - syncronize remote with local repo
   git pull - syncronize local repo with remote
   remote - repository stored on the GitHub servers for remote access


Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

   Similar to manually Vs. automatic commits - to avoid conflicts and repo alterations while working


Describe the differences between forks, clones, and branches. When would you use one instead of another?

   forks: feature on GitHub that allows you to essentially link-clone another public repository to your GitHub
   clones: copies of origin repos, can be locally, remote - local, but not limited to GitHub
   branches: different repos connected to a single non-linear starting master branch that may or may not eventually merge

   Useage
	forks when wanting to give credit to the original piece of work, and develop on it or for it
	clones when wanting to make a copy of another repo - any repo (local, remote)
	branches when wanting to work on two version/types starting from a single common point


What is the benefit of having a copy of the last known state of the remote stored locally?
  the benefit of having a copy of the last known state of the remote stored locally is that doing so
  will allow me to access the files even when i am offline.
  One should do so when for example, one is going to be flying but will not have access to internet and would want to continue working
  Further, even if i dont want to merge at that very moment, I can alway check if there will be any conflicts (while i am still offline)
  and resolve them before initiating a pull request once i have internet.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
  With using Git or GitHub, collaboration would probably be a mess.
  Especially for software projects, as this would induce a lot of duplication of work(due to out-of-sync workspaces),
  major conflicts at the end of the project, due to the inability to merge commit on a per commit basis. This would lead projects to eventually
  take more time resolving conflicts and debugging than actually collaborating and writing software

new terms>
  fork: refers to the the "cloning" of a repo on GitHub itself and only that

  fetch: the function of calling git to fetch the remote upstream repo and update the local repo tracking

  pull request: a request from collaborator#1 to collaborator#2 to check the changes collaborator#1 has made and then merge them into master
    - this is done mainly when collaborating, in order to avoid changes to the master being made without notifying others involved

  fast-forward merge: is the process of merging two branches when they are linear in their path, and thus have no conflicts


When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
  Separate branch would be needed when im working on something that is built on top of the master, to avoid breaking the master incase i get it wrong(which 10/10 i will)
  Never work directly with the master when working in a large group
  You can work directly on the master when working alone, or with just 1 or 2 people, but as soon as the group gets larger, we need to start branching out to get feedback,
  and avoid breaking the master
